[{"/home/biscuit/Projects/TV/src/index.tsx":"1","/home/biscuit/Projects/TV/src/reportWebVitals.ts":"2","/home/biscuit/Projects/TV/src/App.tsx":"3","/home/biscuit/Projects/TV/src/components/Layout/index.tsx":"4","/home/biscuit/Projects/TV/src/components/Show/List/index.tsx":"5","/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx":"6","/home/biscuit/Projects/TV/src/mock/mockShows.ts":"7","/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx":"8","/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx":"9","/home/biscuit/Projects/TV/src/components/Context/ShowsContext.tsx":"10","/home/biscuit/Projects/TV/src/components/Show/NotFound/index.tsx":"11","/home/biscuit/Projects/TV/src/actions/shows.ts":"12","/home/biscuit/Projects/TV/src/components/Routes/index.tsx":"13","/home/biscuit/Projects/TV/src/components/Show/Details/index.tsx":"14","/home/biscuit/Projects/TV/src/components/Show/Details/styles.tsx":"15"},{"size":500,"mtime":1607246695024,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1607174221070,"results":"18","hashOfConfig":"17"},{"size":485,"mtime":1607254321833,"results":"19","hashOfConfig":"17"},{"size":596,"mtime":1607267704146,"results":"20","hashOfConfig":"17"},{"size":525,"mtime":1607267691450,"results":"21","hashOfConfig":"17"},{"size":1593,"mtime":1607256462857,"results":"22","hashOfConfig":"17"},{"size":1717,"mtime":1607262329204,"results":"23","hashOfConfig":"17"},{"size":541,"mtime":1607255041204,"results":"24","hashOfConfig":"17"},{"size":1336,"mtime":1607262507461,"results":"25","hashOfConfig":"17"},{"size":816,"mtime":1607248805310,"results":"26","hashOfConfig":"17"},{"size":802,"mtime":1607253464395,"results":"27","hashOfConfig":"17"},{"size":408,"mtime":1607262117208,"results":"28","hashOfConfig":"17"},{"size":642,"mtime":1607256298686,"results":"29","hashOfConfig":"17"},{"size":3550,"mtime":1607268465956,"results":"30","hashOfConfig":"17"},{"size":373,"mtime":1607268409116,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1c06r8w",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/biscuit/Projects/TV/src/index.tsx",[],["65","66"],"/home/biscuit/Projects/TV/src/reportWebVitals.ts",[],"/home/biscuit/Projects/TV/src/App.tsx",[],"/home/biscuit/Projects/TV/src/components/Layout/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/List/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx",["67"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Show from '../../../types/Show';\nimport './Card.css';\n\nconst DESCRIPTION_NUMBER_OF_CHARACTERS = 45;\n\nconst getOverviewByDescription = (description: string) => {\n    if (description.length > DESCRIPTION_NUMBER_OF_CHARACTERS) {\n        return `${description?.substr(0, DESCRIPTION_NUMBER_OF_CHARACTERS)}...`;\n    }\n\n    return description;\n}\n\nconst attributeDescription = (attributeName: string, attributeValue: string | undefined) => {\n    if (!attributeValue) {\n        return 'null';\n    }\n\n    return (\n        <div className=\"attribute-container\">\n            <div className=\"attribute-name\">{attributeName}</div>\n            <div className=\"attribute-value\">{attributeValue}</div>\n        </div>\n    );\n};\n\nconst ShowCard = (props: Show) => {\n    return (\n        <Link to={`/details/${props.id}`}>\n            <div className=\"card\">\n                <div className=\"card-poster\">\n                    <img src={props.image || process.env.PUBLIC_URL + '/logo192.png'} />\n                </div>\n                <div className=\"show-highlight\">\n                    <h2>{props.name}</h2>\n                    {attributeDescription('First aired:', props.firstAired)}\n                    {attributeDescription('Networks:', props.networks?.join(','))}\n                    {attributeDescription('First aired:', props.firstAired)}\n                    {attributeDescription('Overview:', getOverviewByDescription(props.description))}\n                </div>\n            </div>\n        </Link>\n    )\n};\n\nexport default ShowCard;\n","/home/biscuit/Projects/TV/src/mock/mockShows.ts",[],"/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx",[],"/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Context/ShowsContext.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/NotFound/index.tsx",["68"],"import React from 'react';\nimport { fetchShows } from '../../../actions/shows';\nimport mockShows from '../../../mock/mockShows';\nimport ShowList from '../List';\nimport './NotFound.css';\n\n\nconst NotFound = () => {\n    const shows = fetchShows();\n    const randomIndex = Math.floor(Math.random() * shows.length);\n    const randomShow = shows[randomIndex];\n\n    return (\n        <div className=\"not-found-container\">\n            <div className=\"not-found-title\">\n                <h2>No TV show found</h2>\n            </div>\n            <div className=\"not-found-description\">\n                <p>We sorry, we could not find any shows you are searching for. You can check this show:</p>\n                <ShowList shows={[randomShow]} />\n            </div>\n        </div>\n    );\n};\n\nexport default NotFound;\n","/home/biscuit/Projects/TV/src/actions/shows.ts",[],"/home/biscuit/Projects/TV/src/components/Routes/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Details/index.tsx",["69","70"],"/home/biscuit/Projects/TV/src/components/Show/Details/styles.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":34,"column":21,"nodeType":"77","endLine":34,"endColumn":89},{"ruleId":"78","severity":1,"message":"79","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"78","severity":1,"message":"82","line":1,"column":40,"nodeType":"80","messageId":"81","endLine":1,"endColumn":50},{"ruleId":"75","severity":1,"message":"76","line":70,"column":33,"nodeType":"77","endLine":70,"endColumn":104},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'mockShows' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","no-global-assign","no-unsafe-negation"]