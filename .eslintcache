[{"/home/biscuit/Projects/TV/src/index.tsx":"1","/home/biscuit/Projects/TV/src/reportWebVitals.ts":"2","/home/biscuit/Projects/TV/src/App.tsx":"3","/home/biscuit/Projects/TV/src/components/Layout/index.tsx":"4","/home/biscuit/Projects/TV/src/components/Show/List/index.tsx":"5","/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx":"6","/home/biscuit/Projects/TV/src/mock/mockShows.ts":"7","/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx":"8","/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx":"9","/home/biscuit/Projects/TV/src/components/Context/index.tsx":"10","/home/biscuit/Projects/TV/src/actions/fetchShows.ts":"11"},{"size":500,"mtime":1607174542064,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1607174221070,"results":"14","hashOfConfig":"13"},{"size":208,"mtime":1607175133814,"results":"15","hashOfConfig":"13"},{"size":775,"mtime":1607196768170,"results":"16","hashOfConfig":"13"},{"size":624,"mtime":1607189971114,"results":"17","hashOfConfig":"13"},{"size":1494,"mtime":1607195316107,"results":"18","hashOfConfig":"13"},{"size":1717,"mtime":1607195322967,"results":"19","hashOfConfig":"13"},{"size":440,"mtime":1607181228579,"results":"20","hashOfConfig":"13"},{"size":1289,"mtime":1607198973253,"results":"21","hashOfConfig":"13"},{"size":837,"mtime":1607195546268,"results":"22","hashOfConfig":"13"},{"size":201,"mtime":1607188888617,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1c06r8w",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/home/biscuit/Projects/TV/src/index.tsx",[],["50","51"],"/home/biscuit/Projects/TV/src/reportWebVitals.ts",[],"/home/biscuit/Projects/TV/src/App.tsx",[],"/home/biscuit/Projects/TV/src/components/Layout/index.tsx",["52"],"import React, { Fragment, memo, useEffect } from 'react';\nimport { ApplicationContextProvider } from '../Context';\nimport SearchShow from '../SearchShow';\nimport ShowList from '../Show/List';\nimport Header from './Header';\nimport './Layout.css';\n\nconst Layout = () => {\n    return (\n        <Fragment>\n            <div className=\"header\">\n                <Header />\n            </div>\n            <ApplicationContextProvider>\n                <div className=\"main-content\" style={{ background: `url('${process.env.PUBLIC_URL}/tv_shows_background.jpg')`, backgroundRepeat: 'repeat'}}>\n                    <SearchShow />\n                    <ShowList />\n                </div>\n            </ApplicationContextProvider>\n        </Fragment>\n    )\n\n};\n\nexport default memo(Layout);","/home/biscuit/Projects/TV/src/components/Show/List/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx",["53"],"import React from 'react';\nimport Show from '../../../types/Show';\nimport './Card.css';\n\nconst DESCRIPTION_NUMBER_OF_CHARACTERS = 45;\n\ntype ShowWithoutId = Omit<Show, 'id'>;\n\nconst getOverviewByDescription = (description: string) => {\n    if (description.length > DESCRIPTION_NUMBER_OF_CHARACTERS) {\n        return `${description?.substr(0, DESCRIPTION_NUMBER_OF_CHARACTERS)}...`;\n    }\n\n    return description;\n}\n\nconst attributeDescription = (attributeName: string, attributeValue: string | undefined) => {\n    if (!attributeValue) {\n        return 'null';\n    }\n\n    return (\n        <div className=\"attribute-container\">\n            <div className=\"attribute-name\">{attributeName}</div>\n            <div className=\"attribute-value\">{attributeValue}</div>\n        </div>\n    );\n};\n\nconst ShowCard = (props: ShowWithoutId) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-poster\">\n                <img src={props.image || process.env.PUBLIC_URL + '/logo192.png'} />\n            </div>\n            <div className=\"show-highlight\">\n                <h2>{props.name}</h2>\n                {attributeDescription('First aired:', props.firstAired)}\n                {attributeDescription('Networks:', props.networks?.join(','))}\n                {attributeDescription('First aired:', props.firstAired)}\n                {attributeDescription('Overview:', getOverviewByDescription(props.description))}\n            </div>\n        </div>\n    )\n};\n\nexport default ShowCard;\n","/home/biscuit/Projects/TV/src/mock/mockShows.ts",[],"/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx",[],"/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Context/index.tsx",[],"/home/biscuit/Projects/TV/src/actions/fetchShows.ts",["54"],"import mockShows from \"../mock/mockShows\";\n\nexport default (search: string) => {\n    // Without API call\n    return mockShows.filter(show => show.name.toLowerCase().includes(search.toLowerCase()));\n};\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":33,"nodeType":"61","messageId":"62","endLine":1,"endColumn":42},{"ruleId":"63","severity":1,"message":"64","line":34,"column":17,"nodeType":"65","endLine":34,"endColumn":85},{"ruleId":"66","severity":1,"message":"67","line":3,"column":1,"nodeType":"68","endLine":6,"endColumn":3},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]