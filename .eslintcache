[{"/home/biscuit/Projects/TV/src/index.tsx":"1","/home/biscuit/Projects/TV/src/reportWebVitals.ts":"2","/home/biscuit/Projects/TV/src/App.tsx":"3","/home/biscuit/Projects/TV/src/components/Layout/index.tsx":"4","/home/biscuit/Projects/TV/src/components/Show/List/index.tsx":"5","/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx":"6","/home/biscuit/Projects/TV/src/mock/mockShows.ts":"7","/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx":"8","/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx":"9","/home/biscuit/Projects/TV/src/components/Context/ShowsContext.tsx":"10","/home/biscuit/Projects/TV/src/components/Show/NotFound/index.tsx":"11","/home/biscuit/Projects/TV/src/actions/shows.ts":"12","/home/biscuit/Projects/TV/src/components/Routes/index.tsx":"13","/home/biscuit/Projects/TV/src/components/Show/Details/index.tsx":"14","/home/biscuit/Projects/TV/src/components/Show/Details/styles.tsx":"15","/home/biscuit/Projects/TV/src/actions/seasons.ts":"16","/home/biscuit/Projects/TV/src/mock/mockSeasons.ts":"17","/home/biscuit/Projects/TV/src/pages/ShowDetails/index.tsx":"18","/home/biscuit/Projects/TV/src/components/Show/Details/Seasons.tsx":"19","/home/biscuit/Projects/TV/src/mock/mockEpisodes.ts":"20","/home/biscuit/Projects/TV/src/components/Show/Details/Modal.tsx":"21"},{"size":500,"mtime":1607246695024,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1607174221070,"results":"24","hashOfConfig":"23"},{"size":485,"mtime":1607254321833,"results":"25","hashOfConfig":"23"},{"size":596,"mtime":1607270563137,"results":"26","hashOfConfig":"23"},{"size":525,"mtime":1607267691450,"results":"27","hashOfConfig":"23"},{"size":1593,"mtime":1607256462857,"results":"28","hashOfConfig":"23"},{"size":1717,"mtime":1607262329204,"results":"29","hashOfConfig":"23"},{"size":639,"mtime":1607270128348,"results":"30","hashOfConfig":"23"},{"size":1336,"mtime":1607262507461,"results":"31","hashOfConfig":"23"},{"size":816,"mtime":1607248805310,"results":"32","hashOfConfig":"23"},{"size":802,"mtime":1607253464395,"results":"33","hashOfConfig":"23"},{"size":408,"mtime":1607262117208,"results":"34","hashOfConfig":"23"},{"size":656,"mtime":1607277551438,"results":"35","hashOfConfig":"23"},{"size":1598,"mtime":1607277919747,"results":"36","hashOfConfig":"23"},{"size":392,"mtime":1607279700182,"results":"37","hashOfConfig":"23"},{"size":458,"mtime":1607282999517,"results":"38","hashOfConfig":"23"},{"size":685,"mtime":1607262502073,"results":"39","hashOfConfig":"23"},{"size":1919,"mtime":1607283893108,"results":"40","hashOfConfig":"23"},{"size":2069,"mtime":1607292575599,"results":"41","hashOfConfig":"23"},{"size":925,"mtime":1607292561359,"results":"42","hashOfConfig":"23"},{"size":886,"mtime":1607292530055,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1c06r8w",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/biscuit/Projects/TV/src/index.tsx",[],["90","91"],"/home/biscuit/Projects/TV/src/reportWebVitals.ts",[],"/home/biscuit/Projects/TV/src/App.tsx",[],"/home/biscuit/Projects/TV/src/components/Layout/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/List/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Card/index.tsx",["92"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Show from '../../../types/Show';\nimport './Card.css';\n\nconst DESCRIPTION_NUMBER_OF_CHARACTERS = 45;\n\nconst getOverviewByDescription = (description: string) => {\n    if (description.length > DESCRIPTION_NUMBER_OF_CHARACTERS) {\n        return `${description?.substr(0, DESCRIPTION_NUMBER_OF_CHARACTERS)}...`;\n    }\n\n    return description;\n}\n\nconst attributeDescription = (attributeName: string, attributeValue: string | undefined) => {\n    if (!attributeValue) {\n        return 'null';\n    }\n\n    return (\n        <div className=\"attribute-container\">\n            <div className=\"attribute-name\">{attributeName}</div>\n            <div className=\"attribute-value\">{attributeValue}</div>\n        </div>\n    );\n};\n\nconst ShowCard = (props: Show) => {\n    return (\n        <Link to={`/details/${props.id}`}>\n            <div className=\"card\">\n                <div className=\"card-poster\">\n                    <img src={props.image || process.env.PUBLIC_URL + '/logo192.png'} />\n                </div>\n                <div className=\"show-highlight\">\n                    <h2>{props.name}</h2>\n                    {attributeDescription('First aired:', props.firstAired)}\n                    {attributeDescription('Networks:', props.networks?.join(','))}\n                    {attributeDescription('First aired:', props.firstAired)}\n                    {attributeDescription('Overview:', getOverviewByDescription(props.description))}\n                </div>\n            </div>\n        </Link>\n    )\n};\n\nexport default ShowCard;\n","/home/biscuit/Projects/TV/src/mock/mockShows.ts",[],"/home/biscuit/Projects/TV/src/components/Layout/Header/index.tsx",[],"/home/biscuit/Projects/TV/src/components/SearchShow/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Context/ShowsContext.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/NotFound/index.tsx",["93"],"import React from 'react';\nimport { fetchShows } from '../../../actions/shows';\nimport mockShows from '../../../mock/mockShows';\nimport ShowList from '../List';\nimport './NotFound.css';\n\n\nconst NotFound = () => {\n    const shows = fetchShows();\n    const randomIndex = Math.floor(Math.random() * shows.length);\n    const randomShow = shows[randomIndex];\n\n    return (\n        <div className=\"not-found-container\">\n            <div className=\"not-found-title\">\n                <h2>No TV show found</h2>\n            </div>\n            <div className=\"not-found-description\">\n                <p>We sorry, we could not find any shows you are searching for. You can check this show:</p>\n                <ShowList shows={[randomShow]} />\n            </div>\n        </div>\n    );\n};\n\nexport default NotFound;\n","/home/biscuit/Projects/TV/src/actions/shows.ts",[],"/home/biscuit/Projects/TV/src/components/Routes/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Details/index.tsx",["94"],"import React from 'react';\nimport { StyledTypography } from './styles';\n\nconst Details = (props: any) => {\n    return (\n        <>\n            <div className=\"information\">\n                <div className=\"details-information\">\n                    <StyledTypography type=\"header\">Name</StyledTypography>\n                    <StyledTypography>{ props.details?.name }</StyledTypography>\n                </div>\n                <div className=\"details-information\">\n                    <StyledTypography type=\"header\">Status</StyledTypography>\n                    <StyledTypography>{ props.details?.status }</StyledTypography>\n                </div>\n                <div className=\"details-information\">\n                    <StyledTypography type=\"header\">Genre</StyledTypography>\n                    <StyledTypography>{ props.details?.genre }</StyledTypography>\n                </div>\n                <div className=\"details-information\">\n                    <StyledTypography type=\"header\">Site Rating</StyledTypography>\n                    <StyledTypography>{ props.details?.siteRating }</StyledTypography>\n                </div>\n                <div className=\"details-information\">\n                    <StyledTypography type=\"header\">Description</StyledTypography>\n                    <StyledTypography>{ props.details?.description }</StyledTypography>\n                </div>\n            </div>\n            <div className=\"details-image\">\n                <img src={props.details?.image || process.env.PUBLIC_URL + '/logo192.png'} />\n            </div>\n        </>\n    )\n};\n\nexport default Details;\n","/home/biscuit/Projects/TV/src/components/Show/Details/styles.tsx",[],"/home/biscuit/Projects/TV/src/actions/seasons.ts",[],"/home/biscuit/Projects/TV/src/mock/mockSeasons.ts",[],"/home/biscuit/Projects/TV/src/pages/ShowDetails/index.tsx",[],"/home/biscuit/Projects/TV/src/components/Show/Details/Seasons.tsx",[],"/home/biscuit/Projects/TV/src/mock/mockEpisodes.ts",[],"/home/biscuit/Projects/TV/src/components/Show/Details/Modal.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":34,"column":21,"nodeType":"101","endLine":34,"endColumn":89},{"ruleId":"102","severity":1,"message":"103","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":30,"column":17,"nodeType":"101","endLine":30,"endColumn":94},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'mockShows' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]